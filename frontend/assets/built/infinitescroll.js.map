{"version":3,"file":"infinitescroll.js","sources":["infinitescroll.js"],"sourcesContent":["/* global maxPages */\n\n// Code snippet inspired by https://github.com/douglasrodrigues5/ghost-blog-infinite-scroll\n$(function ($) {\n    var currentPage = 1;\n    var pathname = window.location.pathname;\n    var $document = $(document);\n    var $result = $('.gh-postfeed');\n    var buffer = 300;\n\n    var ticking = false;\n    var isLoading = false;\n\n    var lastScrollY = window.scrollY;\n    var lastWindowHeight = window.innerHeight;\n    var lastDocumentHeight = $document.height();\n\n    function onScroll() {\n        lastScrollY = window.scrollY;\n        requestTick();\n    }\n\n    function onResize() {\n        lastWindowHeight = window.innerHeight;\n        lastDocumentHeight = $document.height();\n        requestTick();\n    }\n\n    function requestTick() {\n        if (!ticking) {\n            requestAnimationFrame(infiniteScroll);\n        }\n        ticking = true;\n    }\n\n    function sanitizePathname(path) {\n        var paginationRegex = /(?:page\\/)(\\d)(?:\\/)$/i;\n\n        // remove hash params from path\n        path = path.replace(/#(.*)$/g, '').replace('////g', '/');\n\n        // remove pagination from the path and replace the current pages\n        // with the actual requested page. E. g. `/page/3/` indicates that\n        // the user actually requested page 3, so we should request page 4\n        // next, unless it's the last page already.\n        if (path.match(paginationRegex)) {\n            currentPage = parseInt(path.match(paginationRegex)[1]);\n\n            path = path.replace(paginationRegex, '');\n        }\n\n        return path;\n    }\n\n    function infiniteScroll() {\n        // sanitize the pathname from possible pagination or hash params\n        pathname = sanitizePathname(pathname);\n\n        // return if already loading\n        if (isLoading) {\n            return;\n        }\n\n        // return if not scroll to the bottom\n        if (lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\n            ticking = false;\n            return;\n        }\n\n        /**\n        * maxPages is defined in default.hbs and is the value\n        * of the amount of pagination pages.\n        * If we reached the last page or are past it,\n        * we return and disable the listeners.\n        */\n        if (currentPage >= maxPages) {\n            window.removeEventListener('scroll', onScroll, {passive: true});\n            window.removeEventListener('resize', onResize);\n            return;\n        }\n\n        isLoading = true;\n\n        // next page\n        currentPage += 1;\n\n        // Load more\n        var nextPage = pathname + 'page/' + currentPage + '/';\n\n        $.get(nextPage, function (content) {\n            var parse = document.createRange().createContextualFragment(content);\n            var posts = parse.querySelectorAll('.post');\n            if (posts.length) {\n                [].forEach.call(posts, function (post) {\n                    $result[0].appendChild(post);\n                });\n            }\n        }).fail(function (xhr) {\n            // 404 indicates we've run out of pages\n            if (xhr.status === 404) {\n                window.removeEventListener('scroll', onScroll, {passive: true});\n                window.removeEventListener('resize', onResize);\n            }\n        }).always(function () {\n            lastDocumentHeight = $document.height();\n            isLoading = false;\n            ticking = false;\n        });\n    }\n\n    window.addEventListener('scroll', onScroll, {passive: true});\n    window.addEventListener('resize', onResize);\n\n    infiniteScroll();\n});\n"],"names":["$","currentPage","pathname","window","location","$document","document","$result","buffer","ticking","isLoading","lastScrollY","scrollY","lastWindowHeight","innerHeight","lastDocumentHeight","height","onScroll","requestTick","onResize","requestAnimationFrame","infiniteScroll","path","nextPage","paginationRegex","replace","match","parseInt","maxPages","removeEventListener","passive","get","content","posts","createRange","createContextualFragment","querySelectorAll","length","forEach","call","post","appendChild","fail","xhr","status","always","addEventListener"],"mappings":"AAGAA,EAAE,SAAUA,GACR,IAAIC,EAAc,EACdC,EAAWC,OAAOC,SAASF,SAC3BG,EAAYL,EAAEM,QAAQ,EACtBC,EAAUP,EAAE,cAAc,EAC1BQ,EAAS,IAETC,EAAU,CAAA,EACVC,EAAY,CAAA,EAEZC,EAAcR,OAAOS,QACrBC,EAAmBV,OAAOW,YAC1BC,EAAqBV,EAAUW,OAAO,EAE1C,SAASC,IACLN,EAAcR,OAAOS,QACrBM,EAAY,CAChB,CAEA,SAASC,IACLN,EAAmBV,OAAOW,YAC1BC,EAAqBV,EAAUW,OAAO,EACtCE,EAAY,CAChB,CAEA,SAASA,IACAT,GACDW,sBAAsBC,CAAc,EAExCZ,EAAU,CAAA,CACd,CAqBA,SAASY,IAnBT,IAA0BC,EAoDlBC,EAnDAC,EAAkB,0BAGtBF,GAJsBA,EAqBMpB,GAjBhBuB,QAAQ,UAAW,EAAE,EAAEA,QAAQ,QAAS,GAAG,GAM9CC,MAAMF,CAAe,IAC1BvB,EAAc0B,SAASL,EAAKI,MAAMF,CAAe,EAAE,EAAE,EAErDF,EAAOA,EAAKG,QAAQD,EAAiB,EAAE,GAQ3CtB,EALOoB,EAQHZ,IAKAC,EAAcE,GAAoBE,EAAqBP,EACvDC,EAAU,CAAA,EAUVR,GAAe2B,UACfzB,OAAO0B,oBAAoB,SAAUZ,EAAU,CAACa,QAAS,CAAA,CAAI,CAAC,EAC9D3B,OAAO0B,oBAAoB,SAAUV,CAAQ,IAIjDT,EAAY,CAAA,EAMRa,EAAWrB,EAAW,SAH1BD,GAAe,GAGmC,IAElDD,EAAE+B,IAAIR,EAAU,SAAUS,GAElBC,EADQ3B,SAAS4B,YAAY,EAAEC,yBAAyBH,CAAO,EACjDI,iBAAiB,OAAO,EACtCH,EAAMI,QACN,GAAGC,QAAQC,KAAKN,EAAO,SAAUO,GAC7BjC,EAAQ,GAAGkC,YAAYD,CAAI,CAC/B,CAAC,CAET,CAAC,EAAEE,KAAK,SAAUC,GAEK,MAAfA,EAAIC,SACJzC,OAAO0B,oBAAoB,SAAUZ,EAAU,CAACa,QAAS,CAAA,CAAI,CAAC,EAC9D3B,OAAO0B,oBAAoB,SAAUV,CAAQ,EAErD,CAAC,EAAE0B,OAAO,WACN9B,EAAqBV,EAAUW,OAAO,EAEtCP,EADAC,EAAY,CAAA,CAEhB,CAAC,GACL,CAEAP,OAAO2C,iBAAiB,SAAU7B,EAAU,CAACa,QAAS,CAAA,CAAI,CAAC,EAC3D3B,OAAO2C,iBAAiB,SAAU3B,CAAQ,EAE1CE,EAAe,CACnB,CAAC"}